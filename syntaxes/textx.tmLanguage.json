{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "textX",
	"patterns": [{
			"include": "#keyword"
		},
		{
			"include": "#constant"
		},
		{
			"include": "#support"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#string"
		},
		{
			"include": "#meta"
		}
	],
	"repository": {
		"keyword": {
			"patterns": [{
					"include": "#operator"
				},
				{
					"include": "#assignment"
				}
			],
			"repository": {
				"operator": {
					"patterns": [{
						"name": "keyword.operator.textx",
						"match": "(\\||\\?|\\*|\\+|#|\\!|\\&)"
					}]
				},
				"assignment": {
					"patterns": [{
						"name": "keyword.operator.assignment.textx",
						"match": "(\\?=|\\*=|\\+=|=)"
					}]
				}
			}
		},
		"constant": {
			"patterns": [{
				"name": "constant.language.textx",
				"match": "(true|false|eolterm)"
			}]
		},
		"string": {
			"patterns": [{
					"include": "#double-quoted"
				},
				{
					"include": "#single-quoted"
				},
				{
					"include": "#regexp"
				}
			],
			"repository": {
				"double-quoted": {
					"patterns": [{
						"name": "string.quoted.double.textx",
						"begin": "\"",
						"end": "\"",
						"patterns": [{
							"include": "#escape-character"
						}]
					}]
				},
				"single-quoted": {
					"patterns": [{
						"name": "string.quoted.single.textx",
						"begin": "'",
						"end": "'",
						"patterns": [{
							"include": "#escape-character"
						}]
					}]
				},
				"regexp": {
					"patterns": [{
						"name": "string.regexp.textx",
						"begin": "\\/",
						"end": "\\/",
						"patterns": [{
							"include": "#escape-character"
						}]
					}]
				},
				"escape-character": {
					"patterns": [{
						"name": "constant.character.escape.textx",
						"match": "\\\\."
					}]
				}
			}
		},
		"support": {
			"patterns": [{
				"name": "support.type.basetype.textx",
				"comment": "Basetypes provided by the framework",
				"match": "(BASETYPE|NUMBER|INT|FLOAT|STRING|BOOL|ID)"
			}]
		},
		"comment": {
			"patterns": [{
					"include": "#line-comment"
				},
				{
					"include": "#block-comment"
				}
			],
			"repository": {
				"line-comment": {
					"patterns": [{
						"name": "comment.line.double-slash.textx",
						"match": "\\/\\/.*$"
					}]
				},
				"block-comment": {
					"patterns": [{
						"name": "comment.block.textx",
						"begin": "\\/\\*",
						"end": "\\*\\/"
					}]
				}
			}
		},
		"meta": {
			"patterns": [{
				"include": "#entity"
			}],
			"repository": {
				"entity": {
					"patterns": [{
						"name": "meta.entity.textx",
						"comment": "Definition of an entity",
						"begin": "(\\w+):(\\s|\\/\\/|\\/\\*)?",
						"beginCaptures": {
							"1": {
								"name": "entity.name.entity.textx"
							}
						},
						"end": ";(\\s|\\/\\/|\\/\\*)?",
						"patterns": [{
								"include": "#comment"
							},
							{
								"include": "#property"
							},
							{
								"include": "#string"
							}
						]
					}],
					"repository": {
						"property": {
							"patterns": [{
									"include": "#property-group"
								},
								{
									"include": "#property-named"
								},
								{
									"include": "#property-type"
								}
							],
							"repository": {
								"property-group": {
									"patterns": [{
										"name": "meta.property.group.textx",
										"begin": "(\\|\\s*)?(\\()",
										"beginCaptures": {
											"1": {
												"patterns": [{
													"name": "keyword.operator.property.group.choice.textx",
													"match": "\\|"
												}]
											},
											"2": {
												"name": "keyword.operator.bracket.open.textx"
											}
										},
										"end": "(\\))(\\?|\\*|\\+|#)?(\\[(('.')|(\".\"))\\])?",
										"endCaptures": {
											"1": {
												"name": "keyword.operator.bracket.closed.textx"
											},
											"2": {
												"name": "keyword.operator.property.group.repetition.textx"
											},
											"3": {
												"name": "support.property.group.delimit.textx",
												"patterns": [{
													"name": "keyword.operator.property.group.delimiter.textx",
													"match": "[^\\[\\]\"']"
												}]
											}
										},
										"patterns": [{
											"include": "#property"
										}]
									}]
								},
								"property-named": {
									"patterns": [{
										"name": "meta.property.named.textx",
										"comment": "A named property within an entity",
										"match": "(\\|\\s*)?(\\w+)\\s?(=|\\?=|\\+=|\\*=)\\s?((\\[[\\w\\|]+\\])|(\\(?\\w+(\\|\\w+)+\\)?)|(\\w+)(\\[(('.')|(\".\"))\\])?|([\"'\\/].*?[\"'\\/]))",
										"captures": {
											"1": {
												"patterns": [{
													"name": "keyword.operator.property.named.choice.textx",
													"match": "\\|"
												}]
											},
											"2": {
												"name": "entity.name.property.textx"
											},
											"3": {
												"name": "keyword.operator.assignment.textx"
											},
											"4": {
												"patterns": [{
													"include": "#property-group"
												},
												{
													"include": "#property-type"
												}]
											}
										}
									}]
								},
								"property-type": {
									"patterns": [{
											"name": "storage.type.property.reference.textx",
											"match": "(\\[[\\w\\|]+\\])|(\\w+(\\|\\w+)+)|(\\w+)(\\[(('.')|(\".\"))\\])?|([\"'\\/].*?[\"'\\/](\\s?\\|\\s?[\"'\\/].*?[\"'\\/])*)",
											"captures": {
												"1": {
													"name": "storage.type.property.reference.textx",
													"patterns": [{
															"name": "keyword.operator.reference.open.squarebracket.textx",
															"match": "\\["
														},
														{
															"name": "keyword.operator.reference.closed.squarebracket.textx",
															"match": "\\]"
														},
														{
															"include": "#property-type"
														}
													]
												},
												"2": {
													"name": "storage.type.property.choice.textx",
													"patterns": [{
															"name": "storage.type.property.name.textx",
															"match": "\\w+"
														},
														{
															"name": "keyword.operator.property.choice.textx",
															"match": "\\|"
														}
													]
												},
												"4": {
													"patterns": [{
														"name": "storage.type.property.name.textx",
														"match": "\\w+"
													}]
												},
												"5": {
													"name": "support.property.group.delimit.textx",
													"patterns": [{
														"name": "keyword.operator.property.group.delimiter.textx",
														"match": "[^\\[\\]\"']"
													}]
												},
												"9": {
													"name": "storage.type.property.string.textx",
													"patterns": [{
														"name": "keyword.operator.property.type.string.choice.textx",
														"match": "(?<=[\"'\\/])\\|"
													},
														{
															"include": "#string"
														}
													]
												}
											}
										},
										{
											"name": "storage.type.property.textx",
											"match": "(\\|\\s*)?((\\w+\\??)|([\"'\\/].*?[\"'\\/]))",
											"captures": {
												"1": {
													"patterns": [{
														"name": "keyword.operator.property.type.choice.textx",
														"match": "\\|"
													}]
												},
												"3": {
													"patterns": [{
															"name": "storage.type.property.name.textx",
															"match": "\\w+"
														},
														{
															"name": "keyword.operator.type.property.optional.textx",
															"match": "\\?"
														}
													]
												},
												"4": {
													"name": "storage.type.property.string.textx",
													"patterns": [{
														"include": "#string"
													}]
												}
											}
										}
									]
								}
							}
						}
					}
				}
			}
		}
	},
	"scopeName": "source.textx"
}